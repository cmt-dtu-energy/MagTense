name: Linux - Python package using conda / pip

on: [push]

jobs:
  build-linux:
    strategy:
      matrix:
        py-version: [312, 313]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    env:
      build_file: python/.build/env-${{ matrix.py-version }}-linux.yml

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Miniforge
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        activate-environment: magtense-env
        use-mamba: true

    - name: Cache conda
      uses: actions/cache@v4
      env:
        # Increase this value to reset cache manually
        cache_number: 0
      with:
        path: ${{ env.CONDA }}/envs
        key: conda-${{ runner.os }}-${{ hashFiles(env.build_file) }}-${{ env.cache_number }}
      id: cache

    - name: Update environment
      run: conda env update -n magtense-env -f ${{ env.build_file }}
      if: steps.cache.outputs.cache-hit != 'true'
    
    - name: Create directory for wrappers of compiled Fortran source code
      run: |
        mkdir ${{ github.workspace }}/python/cpu_libs
        mkdir ${{ github.workspace }}/python/cu12_libs

    - name: Compile Fortran source code and build Python wrappers
      working-directory: ${{ github.workspace }}
      run: |
        make python USE_CUDA=0
        cp magtensesource.*.so ${{ github.workspace }}/python/cpu_libs/
        make clean
        make python USE_CUDA=1
        cp magtensesource.*.so ${{ github.workspace }}/python/cu12_libs/
        make clean

    - name: Build pip-wheels
      working-directory: ${{ github.workspace }}/python/
      run: python .build/dist_pypi.py --py_version ${{ matrix.py-version }} --platform linux

    - name: cpu - Archive pip-wheel
      uses: actions/upload-artifact@v4
      with:
        name: pip-wheel-py${{ matrix.py-version }}-cpu
        path: ${{ github.workspace }}/python/dist/magtense-*-0-py${{ matrix.py-version }}-none-manylinux1_x86_64.whl

    - name: cu12 - Archive pip-wheel
      uses: actions/upload-artifact@v4
      with:
        name: pip-wheel-py${{ matrix.py-version }}-cu12
        path: ${{ github.workspace }}/python/dist/magtense-*-1-py${{ matrix.py-version }}-none-manylinux1_x86_64.whl


  test-linux:
    strategy:
      matrix:
        mt-punit: [cpu, cu12]
        py-version: [312, 313]
    runs-on: ubuntu-latest
    needs: build-linux
    defaults:
      run:
        shell: bash -el {0}
    
    steps:
    - name: Checkout test scripts
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          python/tests/
          documentation/examples_FEM_validation/
    
    - name: Download a single artifact
      uses: actions/download-artifact@v4
      with:
        name: pip-wheel-py${{ matrix.py-version }}-${{ matrix.mt-punit }}

    - name: Setup python 3.12
      if: ${{ matrix.py-version == 312 }}
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Setup python 3.13
      if: ${{ matrix.py-version == 313 }}
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Create a new virtual environment
      run: python3 -m venv ${{ github.workspace }}/.venv

    - name: Install pip-wheel and pytest
      run: |
        source ${{ github.workspace }}/.venv/bin/activate
        python3 -m pip install ${{ github.workspace }}/*.whl
        python3 -m pip install pytest

    - name: Run tests
      run: |
        source ${{ github.workspace }}/.venv/bin/activate
        pytest
