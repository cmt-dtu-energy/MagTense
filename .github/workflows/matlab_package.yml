name: Building Matlab MEX files

on: [push]

jobs:
  build-win:
    runs-on: [self-hosted, Windows]
    steps:  
      - uses: actions/checkout@v4

      - name: Test shell
        shell: cmd /C CALL {0}
        working-directory: ${{ github.workspace }}
        run: dir
      
      - name: Start shell and run make
        shell: cmd /C CALL {0}
        working-directory: ${{ github.workspace }}
        run: >-
          make USE_CUDA=0 USE_CVODE=0 USE_MATLAB=1 CVODE_ROOT=/usr/local/sundials-4.1.0/instdir MATLAB_INCLUDE=/usr/local/MATLAB/R2021b/extern/include MKL_ROOT=/opt/intel/oneapi/mkl/latest
    
      - run: echo "Workflow done"

  
  build-linux:
    strategy:
      matrix:
        py-version: [312]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    env:
      build_file: python/.build/env-${{ matrix.py-version}}-linux.yml

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Miniforge
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        activate-environment: magtense-env
        use-mamba: true

    - name: Cache conda
      uses: actions/cache@v4
      env:
        # Increase this value to reset cache manually
        cache_number: 0
      with:
        path: ${{ env.CONDA }}/envs
        key: conda-${{ runner.os }}-${{ hashFiles(env.build_file) }}-${{ env.cache_number }}
      id: cache

    - name: Update environment
      run: conda env update -n magtense-env -f ${{ env.build_file }}
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Printenv
      run: printenv
      
    - name: Dir list2
      run: ls -l ${CONDA_PREFIX}/lib

    - name: Pwd1
      run: cd ${CONDA_PREFIX}

    - name: Pwd2
      run: pwd
      
    - name: Pwd3
      run: pwd ${CONDA_PREFIX}

    - name: Which1
      run: which ifx

    - name: Set up MATLAB
      uses: matlab-actions/setup-matlab@v2
      with:
        release: R2023b

    - name: Dir list
      run: ls -l /opt/hostedtoolcache/MATLAB/2023.2.999/x64
      
    #- name: Which2
    #  run: ls -l /usr/share/miniconda/envs/magtense-env

    #- name: Which3
    #  run: ls -l /usr/share/miniconda/envs/magtense-env/lib

    - name: Compile Fortran source code and build Python wrapper
      working-directory: ${{ github.workspace }}
      run: make USE_CUDA=0 USE_CVODE=0 USE_MATLAB=1 MATLAB_INCLUDE=/opt/hostedtoolcache/MATLAB/2023.2.999/x64/extern/include MKL_ROOT=${CONDA_PREFIX}

    - name: Run script
      uses: matlab-actions/run-command@v2
      with:
        command: dir; pwd; cd('matlab'); buildMagTenseMEX(1, 0, 0); dir; dir('MEX_files'); cd('examples/Micromagnetism/mumag_micromag_Std_problem_4'); [~,~,~,~,~,~,int_error] = Standard_problem_4('USE_CUDA',false); disp(int_error);

    - name: Which4
      run: ls -l matlab/MEX_files

    - name: Archive MEX-files
      uses: actions/upload-artifact@v4
      with:
        name: MEX-Linux
        path: ${{ github.workspace }}/matlab/MEX_files/*

    
  test-linux:
    strategy:
      matrix:
        mt-punit: [cpu]
        mat-version: [R2020b, R2024b]
    runs-on: ubuntu-latest
    needs: build-linux
    defaults:
      run:
        shell: bash -el {0}
    
    steps:
    - name: Checkout test scripts
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          matlab
          documentation

    - name: Pwd1
      run: cd matlab/MEX_files
          
    - name: Download a single artifact
      uses: actions/download-artifact@v4
      with:
        name: MEX-Linux
        path: ${{ github.workspace }}/matlab/MEX_files

    - name: Set up MATLAB R2020b
      if: ${{ matrix.mat-version == 'R2020b' }}
      uses: matlab-actions/setup-matlab@v2
      with:
        release: R2020b

    - name: Set up MATLAB R2024b
      if: ${{ matrix.mat-version == 'R2024b' }}
      uses: matlab-actions/setup-matlab@v2
      with:
        release: R2024b

    - name: Run script
      uses: matlab-actions/run-command@v2
      with:
        command: dir; pwd; cd('matlab/examples/Micromagnetism/mumag_micromag_Std_problem_4'); [~,~,~,~,~,~,int_error] = Standard_problem_4('USE_CUDA',false); disp(int_error);
